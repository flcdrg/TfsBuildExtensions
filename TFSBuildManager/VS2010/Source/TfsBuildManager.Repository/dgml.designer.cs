// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>TfsBuildManager.Repository</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace TfsBuildManager.Repository
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml", IsNullable = false)]
    public partial class DirectedGraph
    {

        private List<DirectedGraphNode> nodesField;

        private List<DirectedGraphLink> linksField;

        private List<DirectedGraphCategory> categoriesField;

        private List<DirectedGraphProperty> propertiesField;

        private List<DirectedGraphName> qualifiedNamesField;

        private List<DirectedGraphAlias> identifierAliasesField;

        private List<DirectedGraphStyle> stylesField;

        private List<DirectedGraphPath> pathsField;

        private string titleField;

        private string backgroundField;

        private string backgroundImageField;

        private GraphDirectionEnum graphDirectionField;

        private bool graphDirectionFieldSpecified;

        private LayoutEnum layoutField;

        private bool layoutFieldSpecified;

        private ClrBoolean butterflyModeField;

        private bool butterflyModeFieldSpecified;

        private string neighborhoodDistanceField;

        private string zoomLevelField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public DirectedGraph()
        {
            this.pathsField = new List<DirectedGraphPath>();
            this.stylesField = new List<DirectedGraphStyle>();
            this.identifierAliasesField = new List<DirectedGraphAlias>();
            this.qualifiedNamesField = new List<DirectedGraphName>();
            this.propertiesField = new List<DirectedGraphProperty>();
            this.categoriesField = new List<DirectedGraphCategory>();
            this.linksField = new List<DirectedGraphLink>();
            this.nodesField = new List<DirectedGraphNode>();
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Node", IsNullable = false)]
        public List<DirectedGraphNode> Nodes
        {
            get
            {
                return this.nodesField;
            }
            set
            {
                this.nodesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Link", IsNullable = false)]
        public List<DirectedGraphLink> Links
        {
            get
            {
                return this.linksField;
            }
            set
            {
                this.linksField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Category", IsNullable = false)]
        public List<DirectedGraphCategory> Categories
        {
            get
            {
                return this.categoriesField;
            }
            set
            {
                this.categoriesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Property", IsNullable = false)]
        public List<DirectedGraphProperty> Properties
        {
            get
            {
                return this.propertiesField;
            }
            set
            {
                this.propertiesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 4)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Name", IsNullable = false)]
        public List<DirectedGraphName> QualifiedNames
        {
            get
            {
                return this.qualifiedNamesField;
            }
            set
            {
                this.qualifiedNamesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 5)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Alias", IsNullable = false)]
        public List<DirectedGraphAlias> IdentifierAliases
        {
            get
            {
                return this.identifierAliasesField;
            }
            set
            {
                this.identifierAliasesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 6)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Style", IsNullable = false)]
        public List<DirectedGraphStyle> Styles
        {
            get
            {
                return this.stylesField;
            }
            set
            {
                this.stylesField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 7)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Path", IsNullable = false)]
        public List<DirectedGraphPath> Paths
        {
            get
            {
                return this.pathsField;
            }
            set
            {
                this.pathsField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Background
        {
            get
            {
                return this.backgroundField;
            }
            set
            {
                this.backgroundField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string BackgroundImage
        {
            get
            {
                return this.backgroundImageField;
            }
            set
            {
                this.backgroundImageField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public GraphDirectionEnum GraphDirection
        {
            get
            {
                return this.graphDirectionField;
            }
            set
            {
                this.graphDirectionField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GraphDirectionSpecified
        {
            get
            {
                return this.graphDirectionFieldSpecified;
            }
            set
            {
                this.graphDirectionFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public LayoutEnum Layout
        {
            get
            {
                return this.layoutField;
            }
            set
            {
                this.layoutField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LayoutSpecified
        {
            get
            {
                return this.layoutFieldSpecified;
            }
            set
            {
                this.layoutFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean ButterflyMode
        {
            get
            {
                return this.butterflyModeField;
            }
            set
            {
                this.butterflyModeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ButterflyModeSpecified
        {
            get
            {
                return this.butterflyModeFieldSpecified;
            }
            set
            {
                this.butterflyModeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string NeighborhoodDistance
        {
            get
            {
                return this.neighborhoodDistanceField;
            }
            set
            {
                this.neighborhoodDistanceField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ZoomLevel
        {
            get
            {
                return this.zoomLevelField;
            }
            set
            {
                this.zoomLevelField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraph));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraph object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        public static bool Deserialize(string xml, out DirectedGraph obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraph);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraph obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraph Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraph)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraph obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraph);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraph obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraph obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraph LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraph LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphNode
    {

        private List<DirectedGraphNodeCategory> categoryField;

        private string idField;

        private string category1Field;

        private string iconField;

        private string shapeField;

        private string styleField;

        private HorizontalAlignmentEnum horizontalAlignmentField;

        private bool horizontalAlignmentFieldSpecified;

        private VerticalAlignmentEnum verticalAlignmentField;

        private bool verticalAlignmentFieldSpecified;

        private double minWidthField;

        private bool minWidthFieldSpecified;

        private double maxWidthField;

        private bool maxWidthFieldSpecified;

        private double nodeRadiusField;

        private bool nodeRadiusFieldSpecified;

        private string descriptionField;

        private GroupEnum groupField;

        private bool groupFieldSpecified;

        private ClrBoolean isVerticalField;

        private bool isVerticalFieldSpecified;

        private string referenceField;

        private string labelField;

        private VisibilityEnum visibilityField;

        private bool visibilityFieldSpecified;

        private string backgroundField;

        private double fontSizeField;

        private bool fontSizeFieldSpecified;

        private string fontFamilyField;

        private FontStyleEnum fontStyleField;

        private bool fontStyleFieldSpecified;

        private FontWeightEnum fontWeightField;

        private bool fontWeightFieldSpecified;

        private string strokeField;

        private string strokeThicknessField;

        private string strokeDashArrayField;

        private string accessField;

        private string assemblyField;

        private string filePathField;

        private string functionTypeFlagsField;

        private ClrBoolean isAbstractField;

        private bool isAbstractFieldSpecified;

        private ClrBoolean isCodeTypeField;

        private bool isCodeTypeFieldSpecified;

        private ClrBoolean isHubField;

        private bool isHubFieldSpecified;

        private ClrBoolean isOverloadedField;

        private bool isOverloadedFieldSpecified;

        private ClrBoolean isOverridableField;

        private bool isOverridableFieldSpecified;

        private string languageField;

        private string locationField;

        private int linesOfCodeField;

        private bool linesOfCodeFieldSpecified;

        private string namespaceField;

        private string mustImplementField;

        private string typeNameField;

        private ClrBoolean isDocumentationField;

        private bool isDocumentationFieldSpecified;

        private string codeGenSourceNameField;

        private string codeGenTargetNameField;

        private ClrBoolean codeGenIncomingField;

        private bool codeGenIncomingFieldSpecified;

        private int codeSchemaProperty_CallSequenceNumberField;

        private bool codeSchemaProperty_CallSequenceNumberFieldSpecified;

        private ClrBoolean codeSchemaProperty_DisableEnabledErrorHandlerField;

        private bool codeSchemaProperty_DisableEnabledErrorHandlerFieldSpecified;

        private ClrBoolean codeSchemaProperty_DisableEnabledExceptionField;

        private bool codeSchemaProperty_DisableEnabledExceptionFieldSpecified;

        private int codeSchemaProperty_EndColumnField;

        private bool codeSchemaProperty_EndColumnFieldSpecified;

        private int codeSchemaProperty_EndLineField;

        private bool codeSchemaProperty_EndLineFieldSpecified;

        private int codeSchemaProperty_FrameDepthField;

        private bool codeSchemaProperty_FrameDepthFieldSpecified;

        private FrameKindEnum codeSchemaProperty_FrameKindField;

        private bool codeSchemaProperty_FrameKindFieldSpecified;

        private string codeSchemaProperty_IconField;

        private string codeSchemaProperty_InstanceTrackingInformationField;

        private ClrBoolean codeSchemaProperty_IsAbstractField;

        private bool codeSchemaProperty_IsAbstractFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsAnonymousField;

        private bool codeSchemaProperty_IsAnonymousFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsArrayField;

        private bool codeSchemaProperty_IsArrayFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsByReferenceField;

        private bool codeSchemaProperty_IsByReferenceFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsCallToThisField;

        private bool codeSchemaProperty_IsCallToThisFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsConstructorField;

        private bool codeSchemaProperty_IsConstructorFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsDoField;

        private bool codeSchemaProperty_IsDoFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsFinalField;

        private bool codeSchemaProperty_IsFinalFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsForField;

        private bool codeSchemaProperty_IsForFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsForEachField;

        private bool codeSchemaProperty_IsForEachFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsGenericField;

        private bool codeSchemaProperty_IsGenericFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsGenericInstanceField;

        private bool codeSchemaProperty_IsGenericInstanceFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsInternalField;

        private bool codeSchemaProperty_IsInternalFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsHideBySignatureField;

        private bool codeSchemaProperty_IsHideBySignatureFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsOperatorField;

        private bool codeSchemaProperty_IsOperatorFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsOutField;

        private bool codeSchemaProperty_IsOutFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsParameterArrayField;

        private bool codeSchemaProperty_IsParameterArrayFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsPrivateField;

        private bool codeSchemaProperty_IsPrivateFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsProtectedField;

        private bool codeSchemaProperty_IsProtectedFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsProtectedOrInternalField;

        private bool codeSchemaProperty_IsProtectedOrInternalFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsPropertyGetField;

        private bool codeSchemaProperty_IsPropertyGetFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsPropertySetField;

        private bool codeSchemaProperty_IsPropertySetFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsPrototypeField;

        private bool codeSchemaProperty_IsPrototypeFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsPublicField;

        private bool codeSchemaProperty_IsPublicFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsSpecialNameField;

        private bool codeSchemaProperty_IsSpecialNameFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsStaticField;

        private bool codeSchemaProperty_IsStaticFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsUntilLoopField;

        private bool codeSchemaProperty_IsUntilLoopFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsVirtualField;

        private bool codeSchemaProperty_IsVirtualFieldSpecified;

        private ClrBoolean codeSchemaProperty_IsWhileField;

        private bool codeSchemaProperty_IsWhileFieldSpecified;

        private ClrBoolean codeSchemaProperty_PreserveDataField;

        private bool codeSchemaProperty_PreserveDataFieldSpecified;

        private ClrBoolean codeSchemaProperty_SingleInstanceSourceLinkField;

        private bool codeSchemaProperty_SingleInstanceSourceLinkFieldSpecified;

        private ClrBoolean codeSchemaProperty_SingleInstanceTargetLinkField;

        private bool codeSchemaProperty_SingleInstanceTargetLinkFieldSpecified;

        private string codeSchemaProperty_SourceTextField;

        private int codeSchemaProperty_StartColumnField;

        private bool codeSchemaProperty_StartColumnFieldSpecified;

        private int codeSchemaProperty_StartLineField;

        private bool codeSchemaProperty_StartLineFieldSpecified;

        private string codeSchemaProperty_StatementKindField;

        private int codeSchemaProperty_StatementNumberField;

        private bool codeSchemaProperty_StatementNumberFieldSpecified;

        private string codeSchemaProperty_StatementTypeField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public DirectedGraphNode()
        {
            this.categoryField = new List<DirectedGraphNodeCategory>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Category", Order = 0)]
        public List<DirectedGraphNodeCategory> Category
        {
            get
            {
                return this.categoryField;
            }
            set
            {
                this.categoryField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("Category")]
        public string Category1
        {
            get
            {
                return this.category1Field;
            }
            set
            {
                this.category1Field = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Icon
        {
            get
            {
                return this.iconField;
            }
            set
            {
                this.iconField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Shape
        {
            get
            {
                return this.shapeField;
            }
            set
            {
                this.shapeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Style
        {
            get
            {
                return this.styleField;
            }
            set
            {
                this.styleField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public HorizontalAlignmentEnum HorizontalAlignment
        {
            get
            {
                return this.horizontalAlignmentField;
            }
            set
            {
                this.horizontalAlignmentField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HorizontalAlignmentSpecified
        {
            get
            {
                return this.horizontalAlignmentFieldSpecified;
            }
            set
            {
                this.horizontalAlignmentFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public VerticalAlignmentEnum VerticalAlignment
        {
            get
            {
                return this.verticalAlignmentField;
            }
            set
            {
                this.verticalAlignmentField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VerticalAlignmentSpecified
        {
            get
            {
                return this.verticalAlignmentFieldSpecified;
            }
            set
            {
                this.verticalAlignmentFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double MinWidth
        {
            get
            {
                return this.minWidthField;
            }
            set
            {
                this.minWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MinWidthSpecified
        {
            get
            {
                return this.minWidthFieldSpecified;
            }
            set
            {
                this.minWidthFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double MaxWidth
        {
            get
            {
                return this.maxWidthField;
            }
            set
            {
                this.maxWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxWidthSpecified
        {
            get
            {
                return this.maxWidthFieldSpecified;
            }
            set
            {
                this.maxWidthFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double NodeRadius
        {
            get
            {
                return this.nodeRadiusField;
            }
            set
            {
                this.nodeRadiusField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NodeRadiusSpecified
        {
            get
            {
                return this.nodeRadiusFieldSpecified;
            }
            set
            {
                this.nodeRadiusFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public GroupEnum Group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupSpecified
        {
            get
            {
                return this.groupFieldSpecified;
            }
            set
            {
                this.groupFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsVertical
        {
            get
            {
                return this.isVerticalField;
            }
            set
            {
                this.isVerticalField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsVerticalSpecified
        {
            get
            {
                return this.isVerticalFieldSpecified;
            }
            set
            {
                this.isVerticalFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Reference
        {
            get
            {
                return this.referenceField;
            }
            set
            {
                this.referenceField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public VisibilityEnum Visibility
        {
            get
            {
                return this.visibilityField;
            }
            set
            {
                this.visibilityField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VisibilitySpecified
        {
            get
            {
                return this.visibilityFieldSpecified;
            }
            set
            {
                this.visibilityFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Background
        {
            get
            {
                return this.backgroundField;
            }
            set
            {
                this.backgroundField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double FontSize
        {
            get
            {
                return this.fontSizeField;
            }
            set
            {
                this.fontSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontSizeSpecified
        {
            get
            {
                return this.fontSizeFieldSpecified;
            }
            set
            {
                this.fontSizeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FontFamily
        {
            get
            {
                return this.fontFamilyField;
            }
            set
            {
                this.fontFamilyField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FontStyleEnum FontStyle
        {
            get
            {
                return this.fontStyleField;
            }
            set
            {
                this.fontStyleField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified
        {
            get
            {
                return this.fontStyleFieldSpecified;
            }
            set
            {
                this.fontStyleFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FontWeightEnum FontWeight
        {
            get
            {
                return this.fontWeightField;
            }
            set
            {
                this.fontWeightField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified
        {
            get
            {
                return this.fontWeightFieldSpecified;
            }
            set
            {
                this.fontWeightFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Stroke
        {
            get
            {
                return this.strokeField;
            }
            set
            {
                this.strokeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string StrokeThickness
        {
            get
            {
                return this.strokeThicknessField;
            }
            set
            {
                this.strokeThicknessField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string StrokeDashArray
        {
            get
            {
                return this.strokeDashArrayField;
            }
            set
            {
                this.strokeDashArrayField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Access
        {
            get
            {
                return this.accessField;
            }
            set
            {
                this.accessField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Assembly
        {
            get
            {
                return this.assemblyField;
            }
            set
            {
                this.assemblyField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FilePath
        {
            get
            {
                return this.filePathField;
            }
            set
            {
                this.filePathField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FunctionTypeFlags
        {
            get
            {
                return this.functionTypeFlagsField;
            }
            set
            {
                this.functionTypeFlagsField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsAbstract
        {
            get
            {
                return this.isAbstractField;
            }
            set
            {
                this.isAbstractField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsAbstractSpecified
        {
            get
            {
                return this.isAbstractFieldSpecified;
            }
            set
            {
                this.isAbstractFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsCodeType
        {
            get
            {
                return this.isCodeTypeField;
            }
            set
            {
                this.isCodeTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsCodeTypeSpecified
        {
            get
            {
                return this.isCodeTypeFieldSpecified;
            }
            set
            {
                this.isCodeTypeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsHub
        {
            get
            {
                return this.isHubField;
            }
            set
            {
                this.isHubField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsHubSpecified
        {
            get
            {
                return this.isHubFieldSpecified;
            }
            set
            {
                this.isHubFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsOverloaded
        {
            get
            {
                return this.isOverloadedField;
            }
            set
            {
                this.isOverloadedField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsOverloadedSpecified
        {
            get
            {
                return this.isOverloadedFieldSpecified;
            }
            set
            {
                this.isOverloadedFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsOverridable
        {
            get
            {
                return this.isOverridableField;
            }
            set
            {
                this.isOverridableField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsOverridableSpecified
        {
            get
            {
                return this.isOverridableFieldSpecified;
            }
            set
            {
                this.isOverridableFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int LinesOfCode
        {
            get
            {
                return this.linesOfCodeField;
            }
            set
            {
                this.linesOfCodeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinesOfCodeSpecified
        {
            get
            {
                return this.linesOfCodeFieldSpecified;
            }
            set
            {
                this.linesOfCodeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Namespace
        {
            get
            {
                return this.namespaceField;
            }
            set
            {
                this.namespaceField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MustImplement
        {
            get
            {
                return this.mustImplementField;
            }
            set
            {
                this.mustImplementField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string TypeName
        {
            get
            {
                return this.typeNameField;
            }
            set
            {
                this.typeNameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsDocumentation
        {
            get
            {
                return this.isDocumentationField;
            }
            set
            {
                this.isDocumentationField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsDocumentationSpecified
        {
            get
            {
                return this.isDocumentationFieldSpecified;
            }
            set
            {
                this.isDocumentationFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CodeGenSourceName
        {
            get
            {
                return this.codeGenSourceNameField;
            }
            set
            {
                this.codeGenSourceNameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CodeGenTargetName
        {
            get
            {
                return this.codeGenTargetNameField;
            }
            set
            {
                this.codeGenTargetNameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeGenIncoming
        {
            get
            {
                return this.codeGenIncomingField;
            }
            set
            {
                this.codeGenIncomingField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeGenIncomingSpecified
        {
            get
            {
                return this.codeGenIncomingFieldSpecified;
            }
            set
            {
                this.codeGenIncomingFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int CodeSchemaProperty_CallSequenceNumber
        {
            get
            {
                return this.codeSchemaProperty_CallSequenceNumberField;
            }
            set
            {
                this.codeSchemaProperty_CallSequenceNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_CallSequenceNumberSpecified
        {
            get
            {
                return this.codeSchemaProperty_CallSequenceNumberFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_CallSequenceNumberFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_DisableEnabledErrorHandler
        {
            get
            {
                return this.codeSchemaProperty_DisableEnabledErrorHandlerField;
            }
            set
            {
                this.codeSchemaProperty_DisableEnabledErrorHandlerField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_DisableEnabledErrorHandlerSpecified
        {
            get
            {
                return this.codeSchemaProperty_DisableEnabledErrorHandlerFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_DisableEnabledErrorHandlerFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_DisableEnabledException
        {
            get
            {
                return this.codeSchemaProperty_DisableEnabledExceptionField;
            }
            set
            {
                this.codeSchemaProperty_DisableEnabledExceptionField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_DisableEnabledExceptionSpecified
        {
            get
            {
                return this.codeSchemaProperty_DisableEnabledExceptionFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_DisableEnabledExceptionFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int CodeSchemaProperty_EndColumn
        {
            get
            {
                return this.codeSchemaProperty_EndColumnField;
            }
            set
            {
                this.codeSchemaProperty_EndColumnField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_EndColumnSpecified
        {
            get
            {
                return this.codeSchemaProperty_EndColumnFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_EndColumnFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int CodeSchemaProperty_EndLine
        {
            get
            {
                return this.codeSchemaProperty_EndLineField;
            }
            set
            {
                this.codeSchemaProperty_EndLineField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_EndLineSpecified
        {
            get
            {
                return this.codeSchemaProperty_EndLineFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_EndLineFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int CodeSchemaProperty_FrameDepth
        {
            get
            {
                return this.codeSchemaProperty_FrameDepthField;
            }
            set
            {
                this.codeSchemaProperty_FrameDepthField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_FrameDepthSpecified
        {
            get
            {
                return this.codeSchemaProperty_FrameDepthFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_FrameDepthFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FrameKindEnum CodeSchemaProperty_FrameKind
        {
            get
            {
                return this.codeSchemaProperty_FrameKindField;
            }
            set
            {
                this.codeSchemaProperty_FrameKindField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_FrameKindSpecified
        {
            get
            {
                return this.codeSchemaProperty_FrameKindFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_FrameKindFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CodeSchemaProperty_Icon
        {
            get
            {
                return this.codeSchemaProperty_IconField;
            }
            set
            {
                this.codeSchemaProperty_IconField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CodeSchemaProperty_InstanceTrackingInformation
        {
            get
            {
                return this.codeSchemaProperty_InstanceTrackingInformationField;
            }
            set
            {
                this.codeSchemaProperty_InstanceTrackingInformationField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsAbstract
        {
            get
            {
                return this.codeSchemaProperty_IsAbstractField;
            }
            set
            {
                this.codeSchemaProperty_IsAbstractField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsAbstractSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsAbstractFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsAbstractFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsAnonymous
        {
            get
            {
                return this.codeSchemaProperty_IsAnonymousField;
            }
            set
            {
                this.codeSchemaProperty_IsAnonymousField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsAnonymousSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsAnonymousFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsAnonymousFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsArray
        {
            get
            {
                return this.codeSchemaProperty_IsArrayField;
            }
            set
            {
                this.codeSchemaProperty_IsArrayField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsArraySpecified
        {
            get
            {
                return this.codeSchemaProperty_IsArrayFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsArrayFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsByReference
        {
            get
            {
                return this.codeSchemaProperty_IsByReferenceField;
            }
            set
            {
                this.codeSchemaProperty_IsByReferenceField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsByReferenceSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsByReferenceFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsByReferenceFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsCallToThis
        {
            get
            {
                return this.codeSchemaProperty_IsCallToThisField;
            }
            set
            {
                this.codeSchemaProperty_IsCallToThisField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsCallToThisSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsCallToThisFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsCallToThisFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsConstructor
        {
            get
            {
                return this.codeSchemaProperty_IsConstructorField;
            }
            set
            {
                this.codeSchemaProperty_IsConstructorField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsConstructorSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsConstructorFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsConstructorFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsDo
        {
            get
            {
                return this.codeSchemaProperty_IsDoField;
            }
            set
            {
                this.codeSchemaProperty_IsDoField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsDoSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsDoFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsDoFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsFinal
        {
            get
            {
                return this.codeSchemaProperty_IsFinalField;
            }
            set
            {
                this.codeSchemaProperty_IsFinalField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsFinalSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsFinalFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsFinalFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsFor
        {
            get
            {
                return this.codeSchemaProperty_IsForField;
            }
            set
            {
                this.codeSchemaProperty_IsForField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsForSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsForFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsForFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsForEach
        {
            get
            {
                return this.codeSchemaProperty_IsForEachField;
            }
            set
            {
                this.codeSchemaProperty_IsForEachField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsForEachSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsForEachFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsForEachFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsGeneric
        {
            get
            {
                return this.codeSchemaProperty_IsGenericField;
            }
            set
            {
                this.codeSchemaProperty_IsGenericField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsGenericSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsGenericFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsGenericFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsGenericInstance
        {
            get
            {
                return this.codeSchemaProperty_IsGenericInstanceField;
            }
            set
            {
                this.codeSchemaProperty_IsGenericInstanceField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsGenericInstanceSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsGenericInstanceFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsGenericInstanceFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsInternal
        {
            get
            {
                return this.codeSchemaProperty_IsInternalField;
            }
            set
            {
                this.codeSchemaProperty_IsInternalField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsInternalSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsInternalFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsInternalFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsHideBySignature
        {
            get
            {
                return this.codeSchemaProperty_IsHideBySignatureField;
            }
            set
            {
                this.codeSchemaProperty_IsHideBySignatureField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsHideBySignatureSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsHideBySignatureFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsHideBySignatureFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsOperator
        {
            get
            {
                return this.codeSchemaProperty_IsOperatorField;
            }
            set
            {
                this.codeSchemaProperty_IsOperatorField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsOperatorSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsOperatorFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsOperatorFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsOut
        {
            get
            {
                return this.codeSchemaProperty_IsOutField;
            }
            set
            {
                this.codeSchemaProperty_IsOutField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsOutSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsOutFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsOutFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsParameterArray
        {
            get
            {
                return this.codeSchemaProperty_IsParameterArrayField;
            }
            set
            {
                this.codeSchemaProperty_IsParameterArrayField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsParameterArraySpecified
        {
            get
            {
                return this.codeSchemaProperty_IsParameterArrayFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsParameterArrayFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsPrivate
        {
            get
            {
                return this.codeSchemaProperty_IsPrivateField;
            }
            set
            {
                this.codeSchemaProperty_IsPrivateField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsPrivateSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsPrivateFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsPrivateFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsProtected
        {
            get
            {
                return this.codeSchemaProperty_IsProtectedField;
            }
            set
            {
                this.codeSchemaProperty_IsProtectedField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsProtectedSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsProtectedFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsProtectedFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsProtectedOrInternal
        {
            get
            {
                return this.codeSchemaProperty_IsProtectedOrInternalField;
            }
            set
            {
                this.codeSchemaProperty_IsProtectedOrInternalField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsProtectedOrInternalSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsProtectedOrInternalFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsProtectedOrInternalFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsPropertyGet
        {
            get
            {
                return this.codeSchemaProperty_IsPropertyGetField;
            }
            set
            {
                this.codeSchemaProperty_IsPropertyGetField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsPropertyGetSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsPropertyGetFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsPropertyGetFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsPropertySet
        {
            get
            {
                return this.codeSchemaProperty_IsPropertySetField;
            }
            set
            {
                this.codeSchemaProperty_IsPropertySetField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsPropertySetSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsPropertySetFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsPropertySetFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsPrototype
        {
            get
            {
                return this.codeSchemaProperty_IsPrototypeField;
            }
            set
            {
                this.codeSchemaProperty_IsPrototypeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsPrototypeSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsPrototypeFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsPrototypeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsPublic
        {
            get
            {
                return this.codeSchemaProperty_IsPublicField;
            }
            set
            {
                this.codeSchemaProperty_IsPublicField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsPublicSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsPublicFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsPublicFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsSpecialName
        {
            get
            {
                return this.codeSchemaProperty_IsSpecialNameField;
            }
            set
            {
                this.codeSchemaProperty_IsSpecialNameField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsSpecialNameSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsSpecialNameFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsSpecialNameFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsStatic
        {
            get
            {
                return this.codeSchemaProperty_IsStaticField;
            }
            set
            {
                this.codeSchemaProperty_IsStaticField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsStaticSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsStaticFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsStaticFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsUntilLoop
        {
            get
            {
                return this.codeSchemaProperty_IsUntilLoopField;
            }
            set
            {
                this.codeSchemaProperty_IsUntilLoopField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsUntilLoopSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsUntilLoopFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsUntilLoopFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsVirtual
        {
            get
            {
                return this.codeSchemaProperty_IsVirtualField;
            }
            set
            {
                this.codeSchemaProperty_IsVirtualField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsVirtualSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsVirtualFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsVirtualFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_IsWhile
        {
            get
            {
                return this.codeSchemaProperty_IsWhileField;
            }
            set
            {
                this.codeSchemaProperty_IsWhileField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_IsWhileSpecified
        {
            get
            {
                return this.codeSchemaProperty_IsWhileFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_IsWhileFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_PreserveData
        {
            get
            {
                return this.codeSchemaProperty_PreserveDataField;
            }
            set
            {
                this.codeSchemaProperty_PreserveDataField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_PreserveDataSpecified
        {
            get
            {
                return this.codeSchemaProperty_PreserveDataFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_PreserveDataFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_SingleInstanceSourceLink
        {
            get
            {
                return this.codeSchemaProperty_SingleInstanceSourceLinkField;
            }
            set
            {
                this.codeSchemaProperty_SingleInstanceSourceLinkField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_SingleInstanceSourceLinkSpecified
        {
            get
            {
                return this.codeSchemaProperty_SingleInstanceSourceLinkFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_SingleInstanceSourceLinkFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean CodeSchemaProperty_SingleInstanceTargetLink
        {
            get
            {
                return this.codeSchemaProperty_SingleInstanceTargetLinkField;
            }
            set
            {
                this.codeSchemaProperty_SingleInstanceTargetLinkField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_SingleInstanceTargetLinkSpecified
        {
            get
            {
                return this.codeSchemaProperty_SingleInstanceTargetLinkFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_SingleInstanceTargetLinkFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CodeSchemaProperty_SourceText
        {
            get
            {
                return this.codeSchemaProperty_SourceTextField;
            }
            set
            {
                this.codeSchemaProperty_SourceTextField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int CodeSchemaProperty_StartColumn
        {
            get
            {
                return this.codeSchemaProperty_StartColumnField;
            }
            set
            {
                this.codeSchemaProperty_StartColumnField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_StartColumnSpecified
        {
            get
            {
                return this.codeSchemaProperty_StartColumnFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_StartColumnFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int CodeSchemaProperty_StartLine
        {
            get
            {
                return this.codeSchemaProperty_StartLineField;
            }
            set
            {
                this.codeSchemaProperty_StartLineField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_StartLineSpecified
        {
            get
            {
                return this.codeSchemaProperty_StartLineFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_StartLineFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CodeSchemaProperty_StatementKind
        {
            get
            {
                return this.codeSchemaProperty_StatementKindField;
            }
            set
            {
                this.codeSchemaProperty_StatementKindField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int CodeSchemaProperty_StatementNumber
        {
            get
            {
                return this.codeSchemaProperty_StatementNumberField;
            }
            set
            {
                this.codeSchemaProperty_StatementNumberField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSchemaProperty_StatementNumberSpecified
        {
            get
            {
                return this.codeSchemaProperty_StatementNumberFieldSpecified;
            }
            set
            {
                this.codeSchemaProperty_StatementNumberFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CodeSchemaProperty_StatementType
        {
            get
            {
                return this.codeSchemaProperty_StatementTypeField;
            }
            set
            {
                this.codeSchemaProperty_StatementTypeField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphNode));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphNode object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphNode object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphNode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphNode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphNode);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphNode obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphNode Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphNode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphNode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphNode);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphNode obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphNode obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphNode LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphNode LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphNodeCategory
    {

        private string refField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Ref
        {
            get
            {
                return this.refField;
            }
            set
            {
                this.refField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphNodeCategory));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphNodeCategory object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphNodeCategory object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphNodeCategory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphNodeCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphNodeCategory);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphNodeCategory obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphNodeCategory Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphNodeCategory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphNodeCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphNodeCategory);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphNodeCategory obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphNodeCategory obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphNodeCategory LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphNodeCategory LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum HorizontalAlignmentEnum
    {

        /// <remarks/>
        Left,

        /// <remarks/>
        Center,

        /// <remarks/>
        Right,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum VerticalAlignmentEnum
    {

        /// <remarks/>
        Top,

        /// <remarks/>
        Center,

        /// <remarks/>
        Bottom,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum GroupEnum
    {

        /// <remarks/>
        Expanded,

        /// <remarks/>
        Collapsed,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum ClrBoolean
    {

        /// <remarks/>
        True,

        /// <remarks/>
        False,

        /// <remarks/>
        @true,

        /// <remarks/>
        @false,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum VisibilityEnum
    {

        /// <remarks/>
        Visible,

        /// <remarks/>
        Hidden,

        /// <remarks/>
        Collapsed,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum FontStyleEnum
    {

        /// <remarks/>
        Normal,

        /// <remarks/>
        Italic,

        /// <remarks/>
        Oblique,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum FontWeightEnum
    {

        /// <remarks/>
        Black,

        /// <remarks/>
        Bold,

        /// <remarks/>
        DemiBold,

        /// <remarks/>
        ExtraBlack,

        /// <remarks/>
        ExtraBold,

        /// <remarks/>
        ExtraLight,

        /// <remarks/>
        Heavy,

        /// <remarks/>
        Light,

        /// <remarks/>
        Medium,

        /// <remarks/>
        Normal,

        /// <remarks/>
        Regular,

        /// <remarks/>
        Semibold,

        /// <remarks/>
        Thin,

        /// <remarks/>
        UltraBlack,

        /// <remarks/>
        UltraBold,

        /// <remarks/>
        UltraLight,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum FrameKindEnum
    {

        /// <remarks/>
        Conditional,

        /// <remarks/>
        Clause,

        /// <remarks/>
        Loop,

        /// <remarks/>
        Call,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphLink
    {

        private List<DirectedGraphLinkCategory> categoryField;

        private string labelField;

        private VisibilityEnum visibilityField;

        private bool visibilityFieldSpecified;

        private string backgroundField;

        private double fontSizeField;

        private bool fontSizeFieldSpecified;

        private string fontFamilyField;

        private FontStyleEnum fontStyleField;

        private bool fontStyleFieldSpecified;

        private FontWeightEnum fontWeightField;

        private bool fontWeightFieldSpecified;

        private string strokeField;

        private string strokeThicknessField;

        private string strokeDashArrayField;

        private string sourceField;

        private string targetField;

        private string category1Field;

        private ClrBoolean seederField;

        private bool seederFieldSpecified;

        private ClrBoolean attractConsumersField;

        private bool attractConsumersFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public DirectedGraphLink()
        {
            this.categoryField = new List<DirectedGraphLinkCategory>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Category", Order = 0)]
        public List<DirectedGraphLinkCategory> Category
        {
            get
            {
                return this.categoryField;
            }
            set
            {
                this.categoryField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public VisibilityEnum Visibility
        {
            get
            {
                return this.visibilityField;
            }
            set
            {
                this.visibilityField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VisibilitySpecified
        {
            get
            {
                return this.visibilityFieldSpecified;
            }
            set
            {
                this.visibilityFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Background
        {
            get
            {
                return this.backgroundField;
            }
            set
            {
                this.backgroundField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double FontSize
        {
            get
            {
                return this.fontSizeField;
            }
            set
            {
                this.fontSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontSizeSpecified
        {
            get
            {
                return this.fontSizeFieldSpecified;
            }
            set
            {
                this.fontSizeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FontFamily
        {
            get
            {
                return this.fontFamilyField;
            }
            set
            {
                this.fontFamilyField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FontStyleEnum FontStyle
        {
            get
            {
                return this.fontStyleField;
            }
            set
            {
                this.fontStyleField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified
        {
            get
            {
                return this.fontStyleFieldSpecified;
            }
            set
            {
                this.fontStyleFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FontWeightEnum FontWeight
        {
            get
            {
                return this.fontWeightField;
            }
            set
            {
                this.fontWeightField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified
        {
            get
            {
                return this.fontWeightFieldSpecified;
            }
            set
            {
                this.fontWeightFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Stroke
        {
            get
            {
                return this.strokeField;
            }
            set
            {
                this.strokeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string StrokeThickness
        {
            get
            {
                return this.strokeThicknessField;
            }
            set
            {
                this.strokeThicknessField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string StrokeDashArray
        {
            get
            {
                return this.strokeDashArrayField;
            }
            set
            {
                this.strokeDashArrayField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Source
        {
            get
            {
                return this.sourceField;
            }
            set
            {
                this.sourceField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Target
        {
            get
            {
                return this.targetField;
            }
            set
            {
                this.targetField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("Category")]
        public string Category1
        {
            get
            {
                return this.category1Field;
            }
            set
            {
                this.category1Field = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean Seeder
        {
            get
            {
                return this.seederField;
            }
            set
            {
                this.seederField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SeederSpecified
        {
            get
            {
                return this.seederFieldSpecified;
            }
            set
            {
                this.seederFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean AttractConsumers
        {
            get
            {
                return this.attractConsumersField;
            }
            set
            {
                this.attractConsumersField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttractConsumersSpecified
        {
            get
            {
                return this.attractConsumersFieldSpecified;
            }
            set
            {
                this.attractConsumersFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphLink));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphLink object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphLink object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphLink object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphLink obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphLink);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphLink obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphLink Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphLink)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphLink obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphLink);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphLink obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphLink obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphLink LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphLink LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphLinkCategory
    {

        private string refField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Ref
        {
            get
            {
                return this.refField;
            }
            set
            {
                this.refField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphLinkCategory));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphLinkCategory object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphLinkCategory object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphLinkCategory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphLinkCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphLinkCategory);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphLinkCategory obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphLinkCategory Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphLinkCategory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphLinkCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphLinkCategory);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphLinkCategory obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphLinkCategory obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphLinkCategory LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphLinkCategory LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphCategory
    {

        private string idField;

        private string basedOnField;

        private string labelField;

        private VisibilityEnum visibilityField;

        private bool visibilityFieldSpecified;

        private string backgroundField;

        private double fontSizeField;

        private bool fontSizeFieldSpecified;

        private string fontFamilyField;

        private FontStyleEnum fontStyleField;

        private bool fontStyleFieldSpecified;

        private FontWeightEnum fontWeightField;

        private bool fontWeightFieldSpecified;

        private string strokeField;

        private string strokeThicknessField;

        private string strokeDashArrayField;

        private string iconField;

        private string shapeField;

        private string styleField;

        private HorizontalAlignmentEnum horizontalAlignmentField;

        private bool horizontalAlignmentFieldSpecified;

        private VerticalAlignmentEnum verticalAlignmentField;

        private bool verticalAlignmentFieldSpecified;

        private double minWidthField;

        private bool minWidthFieldSpecified;

        private double maxWidthField;

        private bool maxWidthFieldSpecified;

        private double nodeRadiusField;

        private bool nodeRadiusFieldSpecified;

        private string canLinkedNodesBeDataDrivenField;

        private string canBeDataDrivenField;

        private string defaultActionField;

        private string incomingActionLabelField;

        private ClrBoolean isProviderRootField;

        private bool isProviderRootFieldSpecified;

        private ClrBoolean isContainmentField;

        private bool isContainmentFieldSpecified;

        private ClrBoolean isTagField;

        private bool isTagFieldSpecified;

        private string navigationActionLabelField;

        private string outgoingActionLabelField;

        private string sourceCategoryField;

        private string targetCategoryField;

        private string detailsField;

        private string inboundNameField;

        private string outboundNameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string BasedOn
        {
            get
            {
                return this.basedOnField;
            }
            set
            {
                this.basedOnField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public VisibilityEnum Visibility
        {
            get
            {
                return this.visibilityField;
            }
            set
            {
                this.visibilityField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VisibilitySpecified
        {
            get
            {
                return this.visibilityFieldSpecified;
            }
            set
            {
                this.visibilityFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Background
        {
            get
            {
                return this.backgroundField;
            }
            set
            {
                this.backgroundField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double FontSize
        {
            get
            {
                return this.fontSizeField;
            }
            set
            {
                this.fontSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontSizeSpecified
        {
            get
            {
                return this.fontSizeFieldSpecified;
            }
            set
            {
                this.fontSizeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string FontFamily
        {
            get
            {
                return this.fontFamilyField;
            }
            set
            {
                this.fontFamilyField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FontStyleEnum FontStyle
        {
            get
            {
                return this.fontStyleField;
            }
            set
            {
                this.fontStyleField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified
        {
            get
            {
                return this.fontStyleFieldSpecified;
            }
            set
            {
                this.fontStyleFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FontWeightEnum FontWeight
        {
            get
            {
                return this.fontWeightField;
            }
            set
            {
                this.fontWeightField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified
        {
            get
            {
                return this.fontWeightFieldSpecified;
            }
            set
            {
                this.fontWeightFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Stroke
        {
            get
            {
                return this.strokeField;
            }
            set
            {
                this.strokeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string StrokeThickness
        {
            get
            {
                return this.strokeThicknessField;
            }
            set
            {
                this.strokeThicknessField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string StrokeDashArray
        {
            get
            {
                return this.strokeDashArrayField;
            }
            set
            {
                this.strokeDashArrayField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Icon
        {
            get
            {
                return this.iconField;
            }
            set
            {
                this.iconField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Shape
        {
            get
            {
                return this.shapeField;
            }
            set
            {
                this.shapeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Style
        {
            get
            {
                return this.styleField;
            }
            set
            {
                this.styleField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public HorizontalAlignmentEnum HorizontalAlignment
        {
            get
            {
                return this.horizontalAlignmentField;
            }
            set
            {
                this.horizontalAlignmentField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HorizontalAlignmentSpecified
        {
            get
            {
                return this.horizontalAlignmentFieldSpecified;
            }
            set
            {
                this.horizontalAlignmentFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public VerticalAlignmentEnum VerticalAlignment
        {
            get
            {
                return this.verticalAlignmentField;
            }
            set
            {
                this.verticalAlignmentField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VerticalAlignmentSpecified
        {
            get
            {
                return this.verticalAlignmentFieldSpecified;
            }
            set
            {
                this.verticalAlignmentFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double MinWidth
        {
            get
            {
                return this.minWidthField;
            }
            set
            {
                this.minWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MinWidthSpecified
        {
            get
            {
                return this.minWidthFieldSpecified;
            }
            set
            {
                this.minWidthFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double MaxWidth
        {
            get
            {
                return this.maxWidthField;
            }
            set
            {
                this.maxWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxWidthSpecified
        {
            get
            {
                return this.maxWidthFieldSpecified;
            }
            set
            {
                this.maxWidthFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double NodeRadius
        {
            get
            {
                return this.nodeRadiusField;
            }
            set
            {
                this.nodeRadiusField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NodeRadiusSpecified
        {
            get
            {
                return this.nodeRadiusFieldSpecified;
            }
            set
            {
                this.nodeRadiusFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CanLinkedNodesBeDataDriven
        {
            get
            {
                return this.canLinkedNodesBeDataDrivenField;
            }
            set
            {
                this.canLinkedNodesBeDataDrivenField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CanBeDataDriven
        {
            get
            {
                return this.canBeDataDrivenField;
            }
            set
            {
                this.canBeDataDrivenField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DefaultAction
        {
            get
            {
                return this.defaultActionField;
            }
            set
            {
                this.defaultActionField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string IncomingActionLabel
        {
            get
            {
                return this.incomingActionLabelField;
            }
            set
            {
                this.incomingActionLabelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsProviderRoot
        {
            get
            {
                return this.isProviderRootField;
            }
            set
            {
                this.isProviderRootField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsProviderRootSpecified
        {
            get
            {
                return this.isProviderRootFieldSpecified;
            }
            set
            {
                this.isProviderRootFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsContainment
        {
            get
            {
                return this.isContainmentField;
            }
            set
            {
                this.isContainmentField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsContainmentSpecified
        {
            get
            {
                return this.isContainmentFieldSpecified;
            }
            set
            {
                this.isContainmentFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsTag
        {
            get
            {
                return this.isTagField;
            }
            set
            {
                this.isTagField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsTagSpecified
        {
            get
            {
                return this.isTagFieldSpecified;
            }
            set
            {
                this.isTagFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NavigationActionLabel
        {
            get
            {
                return this.navigationActionLabelField;
            }
            set
            {
                this.navigationActionLabelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OutgoingActionLabel
        {
            get
            {
                return this.outgoingActionLabelField;
            }
            set
            {
                this.outgoingActionLabelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SourceCategory
        {
            get
            {
                return this.sourceCategoryField;
            }
            set
            {
                this.sourceCategoryField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string TargetCategory
        {
            get
            {
                return this.targetCategoryField;
            }
            set
            {
                this.targetCategoryField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Details
        {
            get
            {
                return this.detailsField;
            }
            set
            {
                this.detailsField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string InboundName
        {
            get
            {
                return this.inboundNameField;
            }
            set
            {
                this.inboundNameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OutboundName
        {
            get
            {
                return this.outboundNameField;
            }
            set
            {
                this.outboundNameField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphCategory));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphCategory object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphCategory object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphCategory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphCategory);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphCategory obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphCategory Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphCategory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphCategory);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphCategory obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphCategory obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphCategory LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphCategory LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphProperty
    {

        private string idField;

        private ClrBoolean isReferenceField;

        private bool isReferenceFieldSpecified;

        private string labelField;

        private string dataTypeField;

        private string descriptionField;

        private string groupField;

        private string referenceTemplateField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsReference
        {
            get
            {
                return this.isReferenceField;
            }
            set
            {
                this.isReferenceField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsReferenceSpecified
        {
            get
            {
                return this.isReferenceFieldSpecified;
            }
            set
            {
                this.isReferenceFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DataType
        {
            get
            {
                return this.dataTypeField;
            }
            set
            {
                this.dataTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ReferenceTemplate
        {
            get
            {
                return this.referenceTemplateField;
            }
            set
            {
                this.referenceTemplateField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphProperty));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphProperty object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphProperty object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphProperty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphProperty obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphProperty);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphProperty obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphProperty Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphProperty)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphProperty obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphProperty);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphProperty obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphProperty obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphProperty LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphProperty LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphName
    {

        private string idField;

        private string labelField;

        private string valueTypeField;

        private string formatterField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ValueType
        {
            get
            {
                return this.valueTypeField;
            }
            set
            {
                this.valueTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Formatter
        {
            get
            {
                return this.formatterField;
            }
            set
            {
                this.formatterField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphName));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphName);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphName obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphName Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphName);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphName obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphName obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphName LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphName LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphAlias
    {

        private byte nField;

        private string uriField;

        private string idField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public byte n
        {
            get
            {
                return this.nField;
            }
            set
            {
                this.nField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Uri
        {
            get
            {
                return this.uriField;
            }
            set
            {
                this.uriField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphAlias));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphAlias object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphAlias object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphAlias object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphAlias obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphAlias);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphAlias obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphAlias Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphAlias)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphAlias obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphAlias);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphAlias obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphAlias obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphAlias LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphAlias LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphStyle
    {

        private DirectedGraphStyleCondition conditionField;

        private List<DirectedGraphStyleSetter> setterField;

        private TargetTypeEnum targetTypeField;

        private ClrBoolean isEnabledField;

        private bool isEnabledFieldSpecified;

        private string groupLabelField;

        private string valueLabelField;

        private string toolTipField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public DirectedGraphStyle()
        {
            this.setterField = new List<DirectedGraphStyleSetter>();
            this.conditionField = new DirectedGraphStyleCondition();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public DirectedGraphStyleCondition Condition
        {
            get
            {
                return this.conditionField;
            }
            set
            {
                this.conditionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Setter", Order = 1)]
        public List<DirectedGraphStyleSetter> Setter
        {
            get
            {
                return this.setterField;
            }
            set
            {
                this.setterField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public TargetTypeEnum TargetType
        {
            get
            {
                return this.targetTypeField;
            }
            set
            {
                this.targetTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ClrBoolean IsEnabled
        {
            get
            {
                return this.isEnabledField;
            }
            set
            {
                this.isEnabledField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsEnabledSpecified
        {
            get
            {
                return this.isEnabledFieldSpecified;
            }
            set
            {
                this.isEnabledFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string GroupLabel
        {
            get
            {
                return this.groupLabelField;
            }
            set
            {
                this.groupLabelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ValueLabel
        {
            get
            {
                return this.valueLabelField;
            }
            set
            {
                this.valueLabelField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ToolTip
        {
            get
            {
                return this.toolTipField;
            }
            set
            {
                this.toolTipField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphStyle));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphStyle object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        public static bool Deserialize(string xml, out DirectedGraphStyle obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphStyle);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphStyle obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphStyle Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphStyle)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphStyle obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphStyle);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphStyle obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphStyle obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphStyle LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphStyle LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphStyleCondition
    {

        private string expressionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Expression
        {
            get
            {
                return this.expressionField;
            }
            set
            {
                this.expressionField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphStyleCondition));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphStyleCondition object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphStyleCondition object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphStyleCondition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphStyleCondition obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphStyleCondition);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphStyleCondition obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphStyleCondition Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphStyleCondition)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphStyleCondition obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphStyleCondition);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphStyleCondition obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphStyleCondition obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphStyleCondition LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphStyleCondition LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphStyleSetter
    {

        private PropertyType propertyField;

        private string valueField;

        private string expressionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public PropertyType Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Expression
        {
            get
            {
                return this.expressionField;
            }
            set
            {
                this.expressionField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphStyleSetter));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphStyleSetter object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphStyleSetter object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphStyleSetter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphStyleSetter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphStyleSetter);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphStyleSetter obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphStyleSetter Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphStyleSetter)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphStyleSetter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphStyleSetter);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphStyleSetter obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphStyleSetter obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphStyleSetter LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphStyleSetter LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum PropertyType
    {

        /// <remarks/>
        ArrowHeadSize,

        /// <remarks/>
        ArrowHeadWidth,

        /// <remarks/>
        Background,

        /// <remarks/>
        FontFamily,

        /// <remarks/>
        FontSize,

        /// <remarks/>
        FontStyle,

        /// <remarks/>
        FontWeight,

        /// <remarks/>
        Foreground,

        /// <remarks/>
        HorizontalAlignment,

        /// <remarks/>
        Icon,

        /// <remarks/>
        Image,

        /// <remarks/>
        MinWidth,

        /// <remarks/>
        MaxWidth,

        /// <remarks/>
        NodeRadius,

        /// <remarks/>
        SelectedStroke,

        /// <remarks/>
        ShadowDepth,

        /// <remarks/>
        Shape,

        /// <remarks/>
        Stroke,

        /// <remarks/>
        StrokeDashArray,

        /// <remarks/>
        StrokeThickness,

        /// <remarks/>
        Style,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum TargetTypeEnum
    {

        /// <remarks/>
        Node,

        /// <remarks/>
        Link,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public partial class DirectedGraphPath
    {

        private string idField;

        private string valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DirectedGraphPath));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DirectedGraphPath object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DirectedGraphPath object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DirectedGraphPath object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DirectedGraphPath obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphPath);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DirectedGraphPath obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DirectedGraphPath Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DirectedGraphPath)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DirectedGraphPath object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DirectedGraphPath object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DirectedGraphPath obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DirectedGraphPath);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphPath obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DirectedGraphPath obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DirectedGraphPath LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DirectedGraphPath LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum GraphDirectionEnum
    {

        /// <remarks/>
        TopToBottom,

        /// <remarks/>
        BottomToTop,

        /// <remarks/>
        LeftToRight,

        /// <remarks/>
        RightToLeft,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.microsoft.com/vs/2009/dgml")]
    public enum LayoutEnum
    {

        /// <remarks/>
        None,

        /// <remarks/>
        Sugiyama,

        /// <remarks/>
        ForceDirected,

        /// <remarks/>
        DependencyMatrix,
    }
}
